
services:
  db:
    image: postgres:16
    container_name: postgresql

    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./init:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    ports:
      - "5432:5432"
    networks:
      - app_net

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - app_net

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"     # AMQP
      - "15672:15672"   # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_net
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile 
    container_name: web

    # command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app
      - ./static_volume:/app/staticfiles


    working_dir: /app
    ports:
      - "8000:8000"
      - "5678:5678"
    # nginx:
    #   ...
    depends_on:
      - db
      - redis
      - rabbitmq
    env_file:
      - .env
    restart: always
    networks:
      - app_net
  frontend:
    image: node:20-alpine
    container_name: frontend
    working_dir: /app
    command: sh -c "npm install && npm run dev"
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
    networks:
      - app_net
    depends_on:
      - web


  consumer1:
    build:
      context: .
      dockerfile:  backend/employees/e_feature/rabbitmq/consumers/Dockerfile 
    command: python -u backend/employees/e_feature/rabbitmq/consumers/consumer_1.py
    volumes:
      - .:/app
    working_dir: /app
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always 
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    networks:
      - app_net
  consumer2:
    build:
      context: .
      dockerfile:  backend/employees/e_feature/rabbitmq/consumers/Dockerfile 
    command: python backend/employees/e_feature/rabbitmq/consumers/consumer_2.py

    volumes:
      - .:/app
    working_dir: /app
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always 
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    networks:
      - app_net
volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:


networks:
  app_net:


